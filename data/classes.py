import requests
from data import utils as script
import psycopg2 as pg

class DataBase:

    """
    Класс работы с базами данных
    """
    list_v = []
    url_list = []
    counter = 0
    def __init__(self, admin_password,
                 admin_name='postgres',
                 database='Vacancy',
                 host='localhost',
                 port='5432'):

        """
        :param admin_password: Пароль от супер-пользователя
        :param admin_name: Логин супер-пользователя (default = postgres)
        :param database: База данных (default = Vacancy)
        :param host: IP (default = localhost)
        :param port: PORT (default = 5432)
        """

        wished_dbname = 'vacancy'

        conn = pg.connect(f'dbname=postgres user=postgres host=localhost password={admin_password}')

        with conn.cursor() as cur:
            cur.execute(
                """
                select 1 from pg_database where datname = %s
                """,
                [
                    wished_dbname
                ]
            )
            db_exists = bool(cur.fetchone())

        if not db_exists:
            conn.set_isolation_level(0)
            with conn.cursor() as cur:
                cur.execute(
                    f"""
                    create database {wished_dbname}
                    """
                )
        conn.close()

        with pg.connect(f'dbname={wished_dbname} user=postgres host=localhost password={admin_password}') as conn:
            with conn.cursor() as cur:
                cur.execute(
                    """ 
                    create table if not exists founded_vacancy
                        (
                            id                  int generated by default as identity ,
                            employeer_name      varchar,
                            vacancy_name        varchar,
                            vacancy_description varchar,
                            vacancy_salary_max  varchar,
                            vacancy_salary_min  varchar,
                            vacancy_salary_cur  varchar,
                            vacancy_url  varchar
                        );
                    """
                )
                try:
                    cur.execute('ALTER TABLE founded_vacancy ADD CONSTRAINT unique_id UNIQUE (id);')
                except Exception:
                    pass
            conn.commit()

    def get_urls(self, search):

        while self.counter != 10:
            parametres = {'per_page': 100, 'page': self.counter}
            vacancy_list = requests.get(f'https://api.hh.ru/employers?text={search}', parametres)
            if vacancy_list.status_code == 200:
                vacancy_list = vacancy_list.json()
                for i in vacancy_list['items']:
                    if i['open_vacancies'] > 0:
                        self.url_list.append(i['vacancies_url'])

            self.counter += 1

    def get_vacancy(self, admin_password):

        with pg.connect(f'dbname=vacancy user=postgres host=localhost password={admin_password}') as conn:
            with conn.cursor() as cur:
                for i in self.url_list:
                    get_items = requests.get(i)
                    items_json = get_items.json()

                    for a in items_json['items']:
                        if "salary" in a and a["salary"] is not None and "from" \
                                in a["salary"] and a["salary"]["from"] is not None:
                            anti_none_from = a["salary"]["from"]
                        else:
                            anti_none_from = 0

                        if "salary" in a and a["salary"] is not None and "to" \
                                in a["salary"] and a["salary"]["to"] is not None:
                            anti_none_to = a["salary"]["to"]
                        else:
                            anti_none_to = 0

                        if "salary" in a and a["salary"] is not None and "currency" \
                                in a["salary"] and a["salary"]["currency"] is not None:
                            anti_none = a["salary"]['currency']
                        else:
                            anti_none = 'Не указано'

                        cur.execute(f'INSERT INTO founded_vacancy (id, employeer_name, vacancy_name, vacancy_description,'
                                f'vacancy_salary_max, vacancy_salary_min, vacancy_salary_cur, '
                                f'vacancy_url) '
                                f'VALUES (%s, %s, %s, %s, %s, %s, %s, %s) '
                                f'ON CONFLICT (id) DO UPDATE SET '
                                f'employeer_name = EXCLUDED.employeer_name, '
                                f'vacancy_name = EXCLUDED.vacancy_name, '
                                f'vacancy_description = EXCLUDED.vacancy_description, '
                                f'vacancy_salary_max = EXCLUDED.vacancy_salary_max, '
                                f'vacancy_salary_min = EXCLUDED.vacancy_salary_min, '
                                f'vacancy_salary_cur = EXCLUDED.vacancy_salary_cur, '
                                f'vacancy_url = EXCLUDED.vacancy_url',
                                (a['id'], a['employer']['name'], a["name"], a['snippet']['responsibility'],
                                anti_none_to, anti_none_from,
                                anti_none, a['alternate_url']))

                        conn.commit()

    def get_companies_and_vacancies_count(self, admin_password):

        with pg.connect(f'dbname=vacancy user=postgres host=localhost password={admin_password}') as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT employeer_name, count(*) FROM founded_vacancy GROUP BY employeer_name;")
                rows = cur.fetchall()
                for row in rows:
                    print(row[0], row[1])

    def get_all_vacancies(self, admin_password):

        with pg.connect(f'dbname=vacancy user=postgres host=localhost password={admin_password}') as conn:
            with conn.cursor() as cur:
                cur.execute('SELECT employeer_name, vacancy_name, vacancy_salary_max, '
                            'vacancy_salary_min, vacancy_salary_cur, vacancy_url FROM founded_vacancy')
                rows = cur.fetchall()
                for row in rows:
                    print(f'Вакансия: {row[0]}\n'
                          f'Описание: {row[1]}\n'
                          f'Зарплата: от {row[2]} до {row[3]} {row[4]}\n'
                          f'Ссылка: {row[5]}\n')
                    input(f'"ENTER" чтобы продолжить... ')

    def get_vacancies_with_keyword(self, admin_password, key_word, key_employer):
        with pg.connect(f'dbname=vacancy user=postgres host=localhost password={admin_password}') as conn:
            with conn.cursor() as cur:
                cur.execute('SELECT employeer_name, vacancy_name, vacancy_salary_max, '
                            'vacancy_salary_min, vacancy_salary_cur, vacancy_url FROM founded_vacancy '
                            f'WHERE vacancy_name LIKE \'%{key_word}%\' AND employeer_name LIKE \'%{key_employer}%\'')
                rows = cur.fetchall()
                for row in rows:
                    print(row)
                    input('Для продолжения нажмите "ENTER"...')

    def get_employeer(self, admin_password, employeer):

        with pg.connect(f'dbname=vacancy user=postgres host=localhost password={admin_password}') as conn:
            with conn.cursor() as cur:
                cur.execute('SELECT employeer_name, vacancy_name, vacancy_salary_max, '
                            'vacancy_salary_min, vacancy_salary_cur, vacancy_url FROM founded_vacancy '
                            f'WHERE employeer_name LIKE \'%{employeer}%\'')
                rows = cur.fetchall()
                for row in rows:
                    print(row)
                    input('Для продолжения нажмите "ENTER"...')

    def get_avg_salary(self, admin_password):
        with pg.connect(f'dbname=vacancy user=postgres host=localhost password={admin_password}') as conn:
            with conn.cursor() as cur:
                cur.execute(
                    'SELECT AVG(CAST(vacancy_salary_max AS INTEGER) + CAST(vacancy_salary_min AS INTEGER)) / 2 AS avg_salary FROM founded_vacancy')
                result = cur.fetchone()
                avg_salary = result[0] if result else None
                return f'{int(avg_salary)} рублей составляет средняя зарплата по всем найденым вакансиям'

    def get_max_avg(self, admin_password):
        with pg.connect(f'dbname=vacancy user=postgres host=localhost password={admin_password}') as conn:
            with conn.cursor() as cur:
                cur.execute('SELECT * FROM founded_vacancy '
                            'WHERE CAST(vacancy_salary_max AS INTEGER) > '
                            '(SELECT AVG(CAST(vacancy_salary_max AS INTEGER)) FROM founded_vacancy)')
                rows = cur.fetchall()
                for row in rows:
                    print(row)
                    input('Для продолжения нажмите "ENTER"...')

class HeadHunter:
    """
    Класс получения и кэширования информации с сайта hh.ru
    """
    counter = 0  # Для перебора по страницам, перебор начинается с 0 страницы

    def __init__(self, vacancy_name, password, v_count=100):
        """
        :param v_count: Количество вакансий, не более 20 на 1 странице!.
        :param vacancy_name: Название искомой вакансии
        """
        while self.counter != 10:
            parametres = {'per_page': v_count, 'page': self.counter}
            self.vacancy_list = requests.get(f'https://api.hh.ru/vacancies?text={vacancy_name}'
                                   f'&area=1'
                                   f'&search_field=name',
                                   parametres)

            if self.vacancy_list.status_code == 200:
                self.vacancy_list = self.vacancy_list.json()
                script.db_vacancy_search(password, self.vacancy_list)
            self.counter += 1


class SuperJob:
    """
    Класс обработки получаемой информации с сайта superjob.ru
    """
    counter = 0  # Для перебора по страницам, перебор начинается с 0 страницы
    def __init__(self, vacancy_name, password, v_count=100):
        """
        :param vacancy_name: Название вакансии
        """
        api_key = script.api_loader()
        headers = {"X-Api-App-Id": api_key}  # Можно ввести свой ключ сюда
        while self.counter != 10:  # Цикл для выдачи вакансий больше чем позволяет API
            params = {"keyword": f"{vacancy_name}",
                  "count": v_count,
                  "page":self.counter}  # Счетчик вставляем в страницу, чтобы вакансии обновлялись при запросе
            self.vacancy_list = requests.get(f'https://api.superjob.ru/2.0/vacancies/',
                                             headers=headers,
                                             params=params)

            if self.vacancy_list.status_code == 200:
                self.vacancy_list = self.vacancy_list.json()
                script.db_vacancy_search(password, self.vacancy_list)
            self.counter += 1


class Vacancy:
    """
    Класс работы с вакансиями
    """

    vacancy_dict = {}
    vacancy_list = []
    num_id = 0
    like_id = []

    def __init__(self, name):
        """
        :param name: Название профессии
        """
        self.name = name

    def start(self, password):
        """
        Инициализирует классы HeadHunter и SuperJob
        """
        HeadHunter(self.name, password), SuperJob(self.name, password)


